basePath: /api
definitions:
  book-management_internal_models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  book-management_internal_models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      role:
        $ref: '#/definitions/book-management_internal_models.Role'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  book-management_internal_services.BookUpdateRequest:
    properties:
      authorId:
        type: integer
      title:
        type: string
    type: object
  book-management_internal_services.GenreCreateRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  book-management_internal_services.GenreUpdateRequest:
    properties:
      name:
        type: string
    type: object
  book-management_internal_services.ManageBooksRequest:
    properties:
      book_ids:
        items:
          type: integer
        type: array
    required:
    - book_ids
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_handlers.AuthorResponse:
    properties:
      books:
        items:
          $ref: '#/definitions/internal_handlers.BookSimple'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  internal_handlers.AuthorResponseForBook:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  internal_handlers.BookResponse:
    properties:
      author:
        $ref: '#/definitions/internal_handlers.AuthorResponseForBook'
      created_at:
        type: string
      genres:
        items:
          $ref: '#/definitions/internal_handlers.GenreResponseForBook'
        type: array
      id:
        type: integer
      image:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  internal_handlers.BookResponseForGenre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  internal_handlers.BookSimple:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  internal_handlers.CreateAuthorRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  internal_handlers.GenreResponse:
    properties:
      books:
        items:
          $ref: '#/definitions/internal_handlers.BookResponseForGenre'
        type: array
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  internal_handlers.GenreResponseForBook:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  internal_handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  internal_handlers.RegisterRequest:
    properties:
      password:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/book-management_internal_models.Role'
        enum:
        - admin
        - user
      username:
        type: string
    required:
    - password
    - role
    - username
    type: object
  internal_handlers.TokenResponse:
    properties:
      access_token:
        type: string
      expires_at:
        description: unix timestamp
        type: integer
      refresh_token:
        type: string
    type: object
  internal_handlers.UpdateAuthorRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
info:
  contact: {}
  description: A simple RESTful Book Management API built with Golang
  title: Book Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/book-management_internal_models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /authors:
    get:
      consumes:
      - application/json
      description: Retrieve authors with pagination
      parameters:
      - default: 10
        description: Number of authors per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Starting offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      parameters:
      - description: Author data
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateAuthorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handlers.AuthorResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new author
      tags:
      - authors
  /authors/{id}:
    delete:
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an author
      tags:
      - authors
    get:
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.AuthorResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get author details by ID
      tags:
      - authors
    put:
      consumes:
      - application/json
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated author data
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.UpdateAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.AuthorResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an author
      tags:
      - authors
  /books:
    get:
      description: Retrieve a paginated list of books, each including its author
      parameters:
      - default: "10"
        description: Limit number of books per page
        in: query
        name: limit
        type: string
      - default: "0"
        description: Number of books to skip
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all books with pagination
      tags:
      - books
    post:
      consumes:
      - multipart/form-data
      description: Create a new book with a title, author, and optional image
      parameters:
      - description: Book Title
        in: formData
        name: title
        required: true
        type: string
      - description: Author ID
        in: formData
        name: authorId
        required: true
        type: integer
      - description: Book Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handlers.BookResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book by its ID (soft delete if GORM is configured with
        gorm.Model)
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      description: Get a single book along with its author by book ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.BookResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get book details by ID
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Update book fields partially by ID (PATCH)
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book fields to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.BookUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.BookResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a book partially
      tags:
      - books
  /genres:
    get:
      description: Retrieve a paginated list of genres
      parameters:
      - default: "10"
        description: Limit number of genres per page
        in: query
        name: limit
        type: string
      - default: "0"
        description: Number of genres to skip
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all genres with pagination
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: Create a new genre with a name
      parameters:
      - description: Genre data
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.GenreCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handlers.GenreResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new genre
      tags:
      - genres
  /genres/{id}:
    delete:
      description: Delete a genre by its ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a genre
      tags:
      - genres
    get:
      description: Get a single genre by genre ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.GenreResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get genre details by ID
      tags:
      - genres
    patch:
      consumes:
      - application/json
      description: Update genre fields partially by ID (PATCH)
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      - description: Genre fields to update
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.GenreUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.GenreResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a genre partially
      tags:
      - genres
  /genres/{id}/books:
    delete:
      consumes:
      - application/json
      description: Detach multiple books from a genre by providing their IDs
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      - description: List of book IDs
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.ManageBooksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove books from a genre
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: Assign multiple books to a genre by providing their IDs
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      - description: List of book IDs
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.ManageBooksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add books to a genre
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: Replace the current list of books with a new set
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: string
      - description: List of book IDs
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/book-management_internal_services.ManageBooksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Replace books in a genre
      tags:
      - genres
securityDefinitions:
  BearerAuth:
    description: Type "Bearer {your token}" to authenticate.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
